{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // import { Link, useParams } from 'react-router-dom';\n\nimport ComicPage from '../../services/ComicPageService';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './singleComicPage.scss';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleCharacterPage = () => {\n  _s();\n\n  const [character, setCharacter] = useState({});\n  const {\n    loading,\n    error,\n    getCharacterByName,\n    clearError\n  } = useMarvelService();\n  const {\n    characterName\n  } = useParams();\n  useEffect(() => {\n    updateCharacter();\n  }, [characterName]);\n\n  const updateComic = () => {\n    clearError();\n    getCharacterByName(characterName).then(resp => onComicLoaded(resp)).catch(e => {});\n  };\n\n  const onComicLoaded = character => {\n    setCharacter(character);\n  };\n\n  const statusLoading = loading ? Spinner : null;\n  const statusError = error ? ErrorMessage : null;\n  const currentStatus = statusError || statusLoading || ComicPage;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentStatus(character)\n  }, void 0, false);\n};\n\n_s(SingleCharacterPage, \"24yDZCojjcaWI4rRA6lyU/dotQQ=\", true, function () {\n  return [useMarvelService];\n});\n\n_c = SingleCharacterPage;\nexport default SingleCharacterPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleCharacterPage\");","map":{"version":3,"sources":["/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/pages/SingleCharacterPage.js"],"names":["useState","useEffect","ComicPage","useMarvelService","Spinner","ErrorMessage","SingleCharacterPage","character","setCharacter","loading","error","getCharacterByName","clearError","characterName","useParams","updateCharacter","updateComic","then","resp","onComicLoaded","catch","e","statusLoading","statusError","currentStatus"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,wBAAP;;;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAE9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAACS,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,kBAAjB;AAAqCC,IAAAA;AAArC,MAAmDT,gBAAgB,EAAzE;AACA,QAAM;AAACU,IAAAA;AAAD,MAAkBC,SAAS,EAAjC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,eAAe;AAClB,GAFQ,EAEN,CAACF,aAAD,CAFM,CAAT;;AAMA,QAAMG,WAAW,GAAG,MAAM;AACtBJ,IAAAA,UAAU;AACVD,IAAAA,kBAAkB,CAACE,aAAD,CAAlB,CACCI,IADD,CACMC,IAAI,IAAIC,aAAa,CAACD,IAAD,CAD3B,EAECE,KAFD,CAEOC,CAAC,IAAI,CAAE,CAFd;AAGH,GALD;;AAOA,QAAMF,aAAa,GAAIZ,SAAD,IAAe;AACjCC,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACH,GAFD;;AAIA,QAAMe,aAAa,GAAGb,OAAO,GAAGL,OAAH,GAAa,IAA1C;AACA,QAAMmB,WAAW,GAAGb,KAAK,GAAGL,YAAH,GAAkB,IAA3C;AACA,QAAMmB,aAAa,GAAGD,WAAW,IAAID,aAAf,IAAgCpB,SAAtD;AAEA,sBACI;AAAA,cACKsB,aAAa,CAACjB,SAAD;AADlB,mBADJ;AAMH,CAjCD;;GAAMD,mB;UAGuDH,gB;;;KAHvDG,mB;AAmCN,eAAeA,mBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n// import { Link, useParams } from 'react-router-dom';\n\nimport ComicPage from '../../services/ComicPageService'\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './singleComicPage.scss';\n\nconst SingleCharacterPage = () => {\n\n    const [character, setCharacter] = useState({});\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n    const {characterName} = useParams();\n\n    useEffect(() => {\n        updateCharacter();\n    }, [characterName]);\n\n    \n\n    const updateComic = () => {\n        clearError();\n        getCharacterByName(characterName)\n        .then(resp => onComicLoaded(resp))\n        .catch(e => {});\n    }\n\n    const onComicLoaded = (character) => {\n        setCharacter(character)\n    }\n\n    const statusLoading = loading ? Spinner : null;\n    const statusError = error ? ErrorMessage : null;\n    const currentStatus = statusError || statusLoading || ComicPage;\n\n    return (\n        <>\n            {currentStatus(character)}\n        </>\n    )\n\n}\n\nexport default SingleCharacterPage;"]},"metadata":{},"sourceType":"module"}