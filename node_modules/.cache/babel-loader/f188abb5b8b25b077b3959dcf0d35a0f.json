{"ast":null,"code":"var _jsxFileName = \"/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/pages/SingleComicPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './singleComicPage.scss';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleComicPage = () => {\n  _s();\n\n  const [comic, setComic] = useState({});\n  const {\n    loading,\n    error,\n    getComicById,\n    clearError\n  } = useMarvelService();\n  const {\n    comicId\n  } = useParams();\n  useEffect(() => {\n    updateComic();\n  }, [comicId]);\n\n  const updateComic = () => {\n    clearError();\n    getComicById(comicId).then(resp => onComicLoaded(resp)).catch(e => {});\n  };\n\n  const onComicLoaded = comic => {\n    setComic(comic);\n  };\n\n  let statusLoading = loading ? Spinner : null;\n  let statusError = error ? ErrorMessage : null;\n  let currentStatus = statusError || statusLoading || View;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentStatus(comic)\n  }, void 0, false);\n};\n\n_s(SingleComicPage, \"cb9RAmOebqmxj41DXUmLBP0XaGs=\", false, function () {\n  return [useMarvelService, useParams];\n});\n\n_c = SingleComicPage;\n\nconst View = ({\n  title,\n  price,\n  thumbnail,\n  description,\n  pageCount,\n  language\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"single-comic\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: thumbnail,\n      alt: \"x-men\",\n      className: \"single-comic__img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"single-comic__info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"single-comic__name\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"single-comic__descr\",\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"single-comic__descr\",\n        children: [pageCount, \" pages\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"single-comic__descr\",\n        children: [\"Language: \", language]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-comic__price\",\n        children: price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: '../comics',\n      className: \"single-comic__back\",\n      children: \"Back to all\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = View;\nexport default SingleComicPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SingleComicPage\");\n$RefreshReg$(_c2, \"View\");","map":{"version":3,"sources":["/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/pages/SingleComicPage.js"],"names":["useState","useEffect","Link","useParams","useMarvelService","Spinner","ErrorMessage","SingleComicPage","comic","setComic","loading","error","getComicById","clearError","comicId","updateComic","then","resp","onComicLoaded","catch","e","statusLoading","statusError","currentStatus","View","title","price","thumbnail","description","pageCount","language"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AAEA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,wBAAP;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAE1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAACU,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA;AAA/B,MAA6CT,gBAAgB,EAAnE;AACA,QAAM;AAACU,IAAAA;AAAD,MAAYX,SAAS,EAA3B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,WAAW;AACd,GAFQ,EAEN,CAACD,OAAD,CAFM,CAAT;;AAMA,QAAMC,WAAW,GAAG,MAAM;AACtBF,IAAAA,UAAU;AACVD,IAAAA,YAAY,CAACE,OAAD,CAAZ,CACCE,IADD,CACMC,IAAI,IAAIC,aAAa,CAACD,IAAD,CAD3B,EAECE,KAFD,CAEOC,CAAC,IAAI,CAAE,CAFd;AAGH,GALD;;AAOA,QAAMF,aAAa,GAAIV,KAAD,IAAW;AAC7BC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,GAFD;;AAIA,MAAIa,aAAa,GAAGX,OAAO,GAAGL,OAAH,GAAa,IAAxC;AACA,MAAIiB,WAAW,GAAGX,KAAK,GAAGL,YAAH,GAAkB,IAAzC;AACA,MAAIiB,aAAa,GAAGD,WAAW,IAAID,aAAf,IAAgCG,IAApD;AAEA,sBACI;AAAA,cACKD,aAAa,CAACf,KAAD;AADlB,mBADJ;AAKH,CAhCD;;GAAMD,e;UAGiDH,gB,EACjCD,S;;;KAJhBI,e;;AAkCN,MAAMiB,IAAI,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,SAAf;AAA0BC,EAAAA,WAA1B;AAAuCC,EAAAA,SAAvC;AAAkDC,EAAAA;AAAlD,CAAD,KAAiE;AAC1E,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAK,MAAA,GAAG,EAAEH,SAAV;AAAqB,MAAA,GAAG,EAAC,OAAzB;AAAiC,MAAA,SAAS,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,oBAAd;AAAA,kBAAoCF;AAApC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,qBAAb;AAAA,kBAAoCG;AAApC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAG,QAAA,SAAS,EAAC,qBAAb;AAAA,mBAAoCC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAG,QAAA,SAAS,EAAC,qBAAb;AAAA,iCAA8CC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,kBAAsCJ;AAAtC;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eASI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE,WAAV;AAAuB,MAAA,SAAS,EAAC,oBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAdD;;MAAMF,I;AAgBN,eAAejB,eAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './singleComicPage.scss';\n\nconst SingleComicPage = () => {\n\n    const [comic, setComic] = useState({});\n    const {loading, error, getComicById, clearError} = useMarvelService();\n    const {comicId} = useParams();\n\n    useEffect(() => {\n        updateComic();\n    }, [comicId]);\n\n    \n\n    const updateComic = () => {\n        clearError();\n        getComicById(comicId)\n        .then(resp => onComicLoaded(resp))\n        .catch(e => {});\n    }\n\n    const onComicLoaded = (comic) => {\n        setComic(comic)\n    }\n\n    let statusLoading = loading ? Spinner : null;\n    let statusError = error ? ErrorMessage : null;\n    let currentStatus = statusError || statusLoading || View;\n\n    return (\n        <>\n            {currentStatus(comic)}\n        </>\n    )\n}\n\nconst View = ({title, price, thumbnail, description, pageCount, language}) => {\n    return (\n        <div className=\"single-comic\">\n            <img src={thumbnail} alt=\"x-men\" className=\"single-comic__img\"/>\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount} pages</p>\n                <p className=\"single-comic__descr\">Language: {language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <Link to={'../comics'} className=\"single-comic__back\">Back to all</Link>\n        </div>\n    );\n}\n\nexport default SingleComicPage;"]},"metadata":{},"sourceType":"module"}