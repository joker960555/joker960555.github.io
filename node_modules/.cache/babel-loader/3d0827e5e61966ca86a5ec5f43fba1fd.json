{"ast":null,"code":"var _jsxFileName = \"/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/pages/SingleCharacterPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useParams, Redirect } from 'react-router-dom';\nimport ComicPage from '../../services/ComicPageService';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './singleComicPage.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SingleCharacterPage = props => {\n  _s();\n\n  console.log(props.location.propsSearch);\n  if (!props.location.propsSearch) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/firstpage\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 45\n  }, this);\n  const [character, setCharacter] = useState({}); // const {loading, error, getCharacterByName, clearError} = useMarvelService();\n  // const {characterName} = useParams();\n  // useEffect(() => {\n  //     updateCharacter();\n  // }, [characterName]);\n\n  const updateCharacter = () => {// clearError();\n    // getCharacterByName(characterName)\n    // .then(resp => onComicLoaded(resp))\n    // .catch(e => {});\n  }; // const onComicLoaded = (character) => {\n  //     setCharacter(character)\n  // }\n  // const statusLoading = loading ? Spinner : null;\n  // const statusError = error ? ErrorMessage : null;\n  // const currentStatus = statusError || statusLoading || ComicPage;\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(SingleCharacterPage, \"L2P6G7q8Ej1PzGY28Sapy3dkZ4c=\");\n\n_c = SingleCharacterPage;\nexport default SingleCharacterPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleCharacterPage\");","map":{"version":3,"sources":["/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/pages/SingleCharacterPage.js"],"names":["useState","useEffect","useParams","Redirect","ComicPage","useMarvelService","Spinner","ErrorMessage","SingleCharacterPage","props","console","log","location","propsSearch","character","setCharacter","updateCharacter"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,kBAApC;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,wBAAP;;;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAEnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,CAAeC,WAA3B;AACA,MAAI,CAACJ,KAAK,CAACG,QAAN,CAAeC,WAApB,EAAiC,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C,CAJmC,CAKnC;AACA;AAEA;AACA;AACA;;AAGA,QAAMgB,eAAe,GAAG,MAAM,CAC1B;AACA;AACA;AACA;AACH,GALD,CAbmC,CAoBnC;AACA;AACA;AAEA;AACA;AACA;;;AAEA,sBACI,qCADJ;AAMH,CAlCD;;GAAMR,mB;;KAAAA,mB;AAoCN,eAAeA,mBAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, Redirect } from 'react-router-dom';\n\nimport ComicPage from '../../services/ComicPageService'\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './singleComicPage.scss';\n\nconst SingleCharacterPage = (props) => {\n\n    console.log(props.location.propsSearch)\n    if (!props.location.propsSearch) return <Redirect to=\"/firstpage\" />;\n    const [character, setCharacter] = useState({});\n    // const {loading, error, getCharacterByName, clearError} = useMarvelService();\n    // const {characterName} = useParams();\n\n    // useEffect(() => {\n    //     updateCharacter();\n    // }, [characterName]);\n\n\n    const updateCharacter = () => {\n        // clearError();\n        // getCharacterByName(characterName)\n        // .then(resp => onComicLoaded(resp))\n        // .catch(e => {});\n    }\n\n    // const onComicLoaded = (character) => {\n    //     setCharacter(character)\n    // }\n\n    // const statusLoading = loading ? Spinner : null;\n    // const statusError = error ? ErrorMessage : null;\n    // const currentStatus = statusError || statusLoading || ComicPage;\n\n    return (\n        <>\n            {/* {currentStatus(character)} */}\n        </>\n    )\n\n}\n\nexport default SingleCharacterPage;"]},"metadata":{},"sourceType":"module"}