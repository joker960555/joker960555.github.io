{"ast":null,"code":"var _jsxFileName = \"/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/charInfo/CharInfo.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CharInfo = props => {\n  _s();\n\n  const [char, setChar] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const marvelService = new MarvelService();\n  useEffect(() => {\n    updateChar();\n  }, []);\n  useEffect(() => {\n    updateChar();\n  }, [props.characterID]);\n\n  const updateChar = () => {\n    const {\n      characterID\n    } = props;\n\n    if (!characterID) {\n      return;\n    }\n\n    setLoading(true);\n    setError(false);\n    marvelService.getCharacterById(characterID).then(char => {\n      setChar(char);\n      setLoading(false);\n      setError(false);\n    }).catch(e => {\n      setLoading(false);\n      setError(true);\n    });\n  };\n\n  const View = ({\n    name,\n    description,\n    thumbnail,\n    homepage,\n    wiki,\n    thumbnailCoverStatus,\n    comics\n  }) => {\n    comics.splice(10);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"char__basics\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: thumbnailCoverStatus,\n          src: thumbnail,\n          alt: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"char__info-name\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"char__btns\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              href: homepage,\n              className: \"button button__main\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inner\",\n                children: \"homepage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: wiki,\n              className: \"button button__secondary\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inner\",\n                children: \"Wiki\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"char__descr\",\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"char__comics\",\n        children: \"Comics:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"char__comics-list\",\n        children: comics.length < 1 ? 'There are no comics about this character yet' : comics.map((item, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"char__comics-item\",\n          children: item.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  let statusSkeleton = char === null && !loading ? Skeleton : null;\n  let statusLoading = loading ? Spinner : null;\n  let statusError = error ? ErrorMessage : null;\n  let currentStatus = statusError || statusSkeleton || statusLoading || View;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__info\",\n    children: currentStatus(char)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CharInfo, \"SNz1Z+zpoH8fXheg3OM6wntdimU=\");\n\n_c = CharInfo;\nCharInfo.propTypes = {\n  characterID: PropTypes.number\n};\nexport default CharInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharInfo\");","map":{"version":3,"sources":["/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/charInfo/CharInfo.js"],"names":["useState","useEffect","PropTypes","MarvelService","Spinner","ErrorMessage","Skeleton","CharInfo","props","char","setChar","loading","setLoading","error","setError","marvelService","updateChar","characterID","getCharacterById","then","catch","e","View","name","description","thumbnail","homepage","wiki","thumbnailCoverStatus","comics","splice","length","map","item","i","statusSkeleton","statusLoading","statusError","currentStatus","propTypes","number"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    const marvelService = new MarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    useEffect(() => {\n        updateChar();\n    }, [props.characterID])\n\n    const updateChar = () => {\n        const {characterID} = props;\n        if (!characterID) {\n            return;\n        }\n        setLoading(true);\n        setError(false);\n        marvelService\n            .getCharacterById(characterID)\n            .then(char => {\n                setChar(char);\n                setLoading(false);\n                setError(false);\n            })\n            .catch(e => {\n                setLoading(false);\n                setError(true);\n            })\n    }\n\n    const View = ({name, description, thumbnail, homepage, wiki, thumbnailCoverStatus, comics}) => {\n        comics.splice(10);\n        return (\n        <>\n        <div className=\"char__basics\">\n            <img className={thumbnailCoverStatus} src={thumbnail} alt={name}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n            {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length < 1 ? 'There are no comics about this character yet' \n            : comics.map((item, i) => (\n                <li key={i} className=\"char__comics-item\">\n                    {item.name}\n                </li>\n            ))}\n        </ul>\n        </>\n        )\n    }\n\n    let statusSkeleton = char === null && !loading ? Skeleton : null;\n    let statusLoading = loading ? Spinner : null;\n    let statusError = error ? ErrorMessage : null;\n    let currentStatus = statusError || statusSkeleton || statusLoading || View;\n\n    return (\n        <div className=\"char__info\">\n            {currentStatus(char)}\n        </div>\n    )\n    \n}\n\nCharInfo.propTypes = {\n    characterID: PropTypes.number\n}\n\nexport default CharInfo;"]},"metadata":{},"sourceType":"module"}