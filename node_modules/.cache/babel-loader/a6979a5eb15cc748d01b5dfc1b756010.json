{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport ComicPage from '../../services/ComicPageService';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './singleComicPage.scss';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleCharacterPage = () => {\n  _s();\n\n  const location = useLocation();\n  const {\n    from\n  } = location.state;\n  console.log(from.name, from.description);\n  const [character, setCharacter] = useState({}); // const {loading, error, getCharacterByName, clearError} = useMarvelService();\n  // const {characterName} = useParams();\n  // useEffect(() => {\n  //     updateCharacter();\n  // }, [characterName]);\n  // const updateCharacter = () => {\n  //     clearError();\n  //     getCharacterByName(characterName)\n  //     .then(resp => onComicLoaded(resp))\n  //     .catch(e => {});\n  // }\n\n  const onCharacterLoaded = character => {\n    setCharacter(character);\n  }; // const statusLoading = loading ? Spinner : null;\n  // const statusError = error ? ErrorMessage : null;\n  // const currentStatus = statusError || statusLoading || ComicPage;\n\n\n  const currentStatus = ComicPage;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentStatus(from)\n  }, void 0, false);\n};\n\n_s(SingleCharacterPage, \"J6CcAN/ASErm2X5bj/YA8DYSRqs=\", false, function () {\n  return [useLocation];\n});\n\n_c = SingleCharacterPage;\nexport default SingleCharacterPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleCharacterPage\");","map":{"version":3,"sources":["/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/pages/SingleCharacterPage.js"],"names":["useState","useEffect","useParams","useLocation","ComicPage","useMarvelService","Spinner","ErrorMessage","SingleCharacterPage","location","from","state","console","log","name","description","character","setCharacter","onCharacterLoaded","currentStatus"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,kBAAvC;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,wBAAP;;;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAC9B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAWD,QAAQ,CAACE,KAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,IAAjB,EAAuBJ,IAAI,CAACK,WAA5B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,EAAD,CAA1C,CAJ8B,CAK9B;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMkB,iBAAiB,GAAIF,SAAD,IAAe;AACrCC,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACH,GAFD,CApB8B,CAwB9B;AACA;AACA;;;AACA,QAAMG,aAAa,GAAGf,SAAtB;AAEA,sBACI;AAAA,cACKe,aAAa,CAACT,IAAD;AADlB,mBADJ;AAMH,CAnCD;;GAAMF,mB;UACeL,W;;;KADfK,mB;AAqCN,eAAeA,mBAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\n\nimport ComicPage from '../../services/ComicPageService'\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './singleComicPage.scss';\n\nconst SingleCharacterPage = () => {\n    const location = useLocation();\n    const { from } = location.state;\n    console.log(from.name, from.description)\n    const [character, setCharacter] = useState({});\n    // const {loading, error, getCharacterByName, clearError} = useMarvelService();\n    // const {characterName} = useParams();\n\n    // useEffect(() => {\n    //     updateCharacter();\n    // }, [characterName]);\n\n\n    // const updateCharacter = () => {\n    //     clearError();\n    //     getCharacterByName(characterName)\n    //     .then(resp => onComicLoaded(resp))\n    //     .catch(e => {});\n    // }\n\n    const onCharacterLoaded = (character) => {\n        setCharacter(character)\n    }\n\n    // const statusLoading = loading ? Spinner : null;\n    // const statusError = error ? ErrorMessage : null;\n    // const currentStatus = statusError || statusLoading || ComicPage;\n    const currentStatus = ComicPage;\n\n    return (\n        <>\n            {currentStatus(from)}\n        </>\n    )\n\n}\n\nexport default SingleCharacterPage;"]},"metadata":{},"sourceType":"module"}