{"ast":null,"code":"var _jsxFileName = \"/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/charList/CharList.js\",\n    _s = $RefreshSig$();\n\n// import { useState, useEffect, useRef } from 'react';\n// import PropTypes from 'prop-types';\n// import useMarvelService from '../../services/MarvelService';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\n// import './charList.scss';\n// const CharList = (props) => {\n//     const [charArr, setCharArr] = useState([]);\n//     const [pages, setPages] = useState(0);\n//     const [charEnded, setCharEnded] = useState(false);\n//     const [offset, setOffset] = useState(111);\n//     const [newItemLoading, setNewItemLoading] = useState(false);\n//     const {loading, error, getAllCharacters} = useMarvelService();\n//     useEffect(() => {\n//         onLoadingMore(offset, true);\n//     }, [])\n//     const onCharListLoaded = (newArray) => {\n//         let ended = newArray.length < 9 ? true : false;\n//         setCharArr(charArr => charArr.concat(newArray));\n//         setOffset(offset => offset + 9)\n//         setNewItemLoading(newItemLoading => false);\n//         setCharEnded(charEnded => ended);\n//     }\n//     const onLoadingMore = (offset, initial) => {\n//         initial ? setNewItemLoading(false) : setNewItemLoading(true);\n//         setPages(pages => pages + 1);\n//         getAllCharacters(offset)\n//             .then(charArr => onCharListLoaded(charArr))\n//             .catch(e => {})\n//     }\n//     const listItemsRefs = useRef([]);\n//     const isActive = (i) => {\n//         listItemsRefs.current.forEach(item => {\n//             item.classList.remove('char__item_selected')\n//         });\n//         listItemsRefs.current[i].classList.add('char__item_selected');\n//         listItemsRefs.current[i].focus();\n//     }\n//     const renderCharListItems = (charArr) => {\n//         console.log(charArr.length)\n//         const items = charArr.map((item, i) => {\n//             const {name, thumbnail, thumbnailCoverStatus, id} = item;\n//             return (\n//                 <li className=\"char__item\" \n//                     key={id}\n//                     ref={el => listItemsRefs.current[i] = el}\n//                     onClick={() => {\n//                         props.onCharSelected(id);\n//                         isActive(i);\n//                     }}\n//                     onKeyPress={(e) => {\n//                         if (e.key === 'Enter' || e.key === ' ') {\n//                             isActive(i);\n//                             props.onCharSelected(id);\n//                         }\n//                     }}\n//                     tabIndex={0}\n//                 >\n//                     <img className={thumbnailCoverStatus} src={thumbnail} alt={name}/>\n//                     <div className=\"char__name\">{name}</div>\n//                 </li>\n//             )\n//         })\n//         return (\n//             <ul className=\"char__grid\">\n//                 {items}\n//             </ul>\n//         )\n//     }\n//     let statusLoading = loading && pages === 0 ? Spinner : null;\n//     let statusLoadMore = loading && pages > 0 ? <Spinner/> : null;\n//     let statusError = error ? ErrorMessage : null;\n//     let currentStatus = statusError || statusLoading || renderCharListItems\n//     return (\n//         <div className=\"char__list\">\n//             {currentStatus(charArr)}\n//             {statusLoadMore}\n//             <button \n//                 className=\"button button__main button__long\"\n//                 disabled={loading}\n//                 style={{'display': charEnded ? 'none' : 'block'}}\n//                 onClick={onLoadingMore} \n//             >\n//                     <div className=\"inner\">load more</div>\n//             </button>\n//         </div>\n//     )\n// }\n// CharList.propTypes = {\n//     onCharSelected: PropTypes.func.isRequired\n// }\n// export default CharList;\nimport { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CharList = props => {\n  _s();\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n  const {\n    loading,\n    error,\n    getAllCharacters\n  } = useMarvelService();\n  useEffect(() => {\n    onRequest(offset, true);\n  }, [newItemLoading]);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = newCharList => {\n    let ended = false;\n\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList]);\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 9);\n    setCharEnded(charEnded => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = id => {\n    // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n    // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n    // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n    // в отдельный компонент. Но кода будет больше, появится новое состояние\n    // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n    // По возможности, не злоупотребляйте рефами, только в крайних случаях\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  }; // Этот метод создан для оптимизации, \n  // чтобы не помещать такую конструкцию в метод render\n\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = {\n        'objectFit': 'cover'\n      };\n\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {\n          'objectFit': 'unset'\n        };\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"char__item\",\n        tabIndex: 0,\n        ref: el => itemRefs.current[i] = el,\n        onClick: () => {\n          props.onCharSelected(item.id);\n          focusOnItem(i);\n        },\n        onKeyPress: e => {\n          if (e.key === ' ' || e.key === \"Enter\") {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.thumbnail,\n          alt: item.name,\n          style: imgStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this);\n    }); // А эта конструкция вынесена для центровки спиннера/ошибки\n\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this);\n  }\n\n  const items = renderItems(charList);\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 34\n  }, this) : null;\n  const spinner = loading && !newItemLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 50\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__list\",\n    children: [errorMessage, spinner, items, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      disabled: newItemLoading,\n      style: {\n        'display': charEnded ? 'none' : 'block'\n      },\n      onClick: () => onRequest(offset),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CharList, \"HpVx0KVk6dCvMevWoOlsw1EGqYE=\", false, function () {\n  return [useMarvelService];\n});\n\n_c = CharList;\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n};\nexport default CharList;\n/* <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item char__item_selected\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li> */\n\nvar _c;\n\n$RefreshReg$(_c, \"CharList\");","map":{"version":3,"sources":["/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/charList/CharList.js"],"names":["useState","useEffect","useRef","PropTypes","Spinner","ErrorMessage","useMarvelService","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","loading","error","getAllCharacters","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","itemRefs","focusOnItem","id","current","forEach","item","classList","remove","add","focus","renderItems","arr","items","map","i","imgStyle","thumbnail","el","onCharSelected","e","key","name","errorMessage","spinner","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["// import { useState, useEffect, useRef } from 'react';\n// import PropTypes from 'prop-types';\n\n// import useMarvelService from '../../services/MarvelService';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\n\n// import './charList.scss';\n\n// const CharList = (props) => {\n\n//     const [charArr, setCharArr] = useState([]);\n//     const [pages, setPages] = useState(0);\n//     const [charEnded, setCharEnded] = useState(false);\n//     const [offset, setOffset] = useState(111);\n//     const [newItemLoading, setNewItemLoading] = useState(false);\n\n//     const {loading, error, getAllCharacters} = useMarvelService();\n\n//     useEffect(() => {\n//         onLoadingMore(offset, true);\n//     }, [])\n\n//     const onCharListLoaded = (newArray) => {\n//         let ended = newArray.length < 9 ? true : false;\n\n//         setCharArr(charArr => charArr.concat(newArray));\n//         setOffset(offset => offset + 9)\n//         setNewItemLoading(newItemLoading => false);\n//         setCharEnded(charEnded => ended);\n//     }\n\n//     const onLoadingMore = (offset, initial) => {\n//         initial ? setNewItemLoading(false) : setNewItemLoading(true);\n//         setPages(pages => pages + 1);\n//         getAllCharacters(offset)\n//             .then(charArr => onCharListLoaded(charArr))\n//             .catch(e => {})\n//     }\n\n//     const listItemsRefs = useRef([]);\n\n//     const isActive = (i) => {\n//         listItemsRefs.current.forEach(item => {\n//             item.classList.remove('char__item_selected')\n//         });\n//         listItemsRefs.current[i].classList.add('char__item_selected');\n//         listItemsRefs.current[i].focus();\n//     }\n\n//     const renderCharListItems = (charArr) => {\n//         console.log(charArr.length)\n//         const items = charArr.map((item, i) => {\n//             const {name, thumbnail, thumbnailCoverStatus, id} = item;\n//             return (\n//                 <li className=\"char__item\" \n//                     key={id}\n//                     ref={el => listItemsRefs.current[i] = el}\n//                     onClick={() => {\n//                         props.onCharSelected(id);\n//                         isActive(i);\n//                     }}\n//                     onKeyPress={(e) => {\n//                         if (e.key === 'Enter' || e.key === ' ') {\n//                             isActive(i);\n//                             props.onCharSelected(id);\n//                         }\n//                     }}\n//                     tabIndex={0}\n//                 >\n//                     <img className={thumbnailCoverStatus} src={thumbnail} alt={name}/>\n//                     <div className=\"char__name\">{name}</div>\n//                 </li>\n//             )\n//         })\n//         return (\n//             <ul className=\"char__grid\">\n//                 {items}\n//             </ul>\n//         )\n//     }\n    \n//     let statusLoading = loading && pages === 0 ? Spinner : null;\n//     let statusLoadMore = loading && pages > 0 ? <Spinner/> : null;\n//     let statusError = error ? ErrorMessage : null;\n//     let currentStatus = statusError || statusLoading || renderCharListItems\n//     return (\n//         <div className=\"char__list\">\n//             {currentStatus(charArr)}\n//             {statusLoadMore}\n//             <button \n//                 className=\"button button__main button__long\"\n//                 disabled={loading}\n//                 style={{'display': charEnded ? 'none' : 'block'}}\n//                 onClick={onLoadingMore} \n//             >\n//                     <div className=\"inner\">load more</div>\n//             </button>\n//         </div>\n//     )\n// }\n\n// CharList.propTypes = {\n//     onCharSelected: PropTypes.func.isRequired\n// }\n\n// export default CharList;\n\nimport {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [newItemLoading])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n/* <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item char__item_selected\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li>\n                    <li className=\"char__item\">\n                        <img src={abyss} alt=\"abyss\"/>\n                        <div className=\"char__name\">Abyss</div>\n                    </li> */"]},"metadata":{},"sourceType":"module"}