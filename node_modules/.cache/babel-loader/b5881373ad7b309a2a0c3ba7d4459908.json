{"ast":null,"code":"var _jsxFileName = \"/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/searchForm/SearchForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport './searchForm.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchForm = () => {\n  _s();\n\n  const {\n    getCharacterByName,\n    loading,\n    error\n  } = useMarvelService();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    },\n    reset\n  } = useForm();\n  const [characterData, setCharacterData] = useState(null);\n\n  const onSubmit = data => {\n    getCharacterByName(data.name).then(resp => setCharacterData(resp)).catch(e => {\n      console.log(e);\n    });\n    reset();\n  };\n\n  const pageUrl = data => {\n    console.log(data);\n    return data.name;\n  };\n\n  const renderURL = name => {\n    return `There is! Visit ${name} page?`;\n  };\n\n  console.log(characterData, Array.isArray(characterData), characterData.length); // const results = !characterData ? null : characterData.length > 0 ? \n  //     <Link \n  //         className=\"char__search_found\"\n  //         to={`../${pageUrl(characterData[0].name)}`}\n  //         state={{from: characterData[0]}}\n  //     >{renderURL(characterData[0].name)}</Link> : \n  //     <p className=\"char__search_error\">\n  //         The character was not found. Check the name and try again</p>;\n\n  const StatusLoading = loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 38\n  }, this);\n\n  const StatusError = error && /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 34\n  }, this); // const ActiveStatus = StatusError || StatusLoading || \n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"char__search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__search_label\",\n      children: \"Or find a character by name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(\"name\", {\n        required: 'This field is required'\n      }),\n      type: \"text\",\n      placeholder: \"Enter name\",\n      className: \"char__search_input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"char__search_button button button__main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"find\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), errors.name && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"char__search_error\",\n      children: errors.name.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchForm, \"RuiRIFtauHZ93E95q/jZ03o8e/w=\", false, function () {\n  return [useMarvelService, useForm];\n});\n\n_c = SearchForm;\nexport default SearchForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchForm\");","map":{"version":3,"sources":["/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/components/searchForm/SearchForm.js"],"names":["useState","useForm","Link","useMarvelService","Spinner","ErrorMessage","SearchForm","getCharacterByName","loading","error","register","handleSubmit","formState","errors","reset","characterData","setCharacterData","onSubmit","data","name","then","resp","catch","e","console","log","pageUrl","renderURL","Array","isArray","length","StatusLoading","StatusError","required","message"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,mBAAP;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM;AAACC,IAAAA,kBAAD;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA;AAA9B,MAAuCN,gBAAgB,EAA7D;AAEA,QAAM;AAACO,IAAAA,QAAD;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA,SAAS,EAAE;AAACC,MAAAA;AAAD,KAApC;AAA8CC,IAAAA;AAA9C,MAAuDb,OAAO,EAApE;AAEA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,IAAD,CAAlD;;AAEA,QAAMiB,QAAQ,GAAGC,IAAI,IAAI;AACrBX,IAAAA,kBAAkB,CAACW,IAAI,CAACC,IAAN,CAAlB,CACKC,IADL,CACUC,IAAI,IAAIL,gBAAgB,CAACK,IAAD,CADlC,EAEKC,KAFL,CAEWC,CAAC,IAAE;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe,KAF9B;AAGAT,IAAAA,KAAK;AACR,GALD;;AAOA,QAAMY,OAAO,GAAIR,IAAD,IAAU;AACtBM,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACA,WAAOA,IAAI,CAACC,IAAZ;AACH,GAHD;;AAKA,QAAMQ,SAAS,GAAIR,IAAD,IAAU;AACxB,WAAQ,mBAAkBA,IAAK,QAA/B;AACH,GAFD;;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAYV,aAAZ,EAA2Ba,KAAK,CAACC,OAAN,CAAcd,aAAd,CAA3B,EAAyDA,aAAa,CAACe,MAAvE,EAxBqB,CAyBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,aAAa,GAAGvB,OAAO,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAjC;;AACA,QAAMwB,WAAW,GAAGvB,KAAK,iBAAI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,UAA7B,CAnCqB,CAoCrB;;;AAEA,sBACI;AAAM,IAAA,QAAQ,EAAEE,YAAY,CAACM,QAAD,CAA5B;AAAwC,IAAA,SAAS,EAAC,cAAlD;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,sBACQP,QAAQ,CAAC,MAAD,EACR;AACIuB,QAAAA,QAAQ,EAAE;AADd,OADQ,CADhB;AAMI,MAAA,IAAI,EAAC,MANT;AAOI,MAAA,WAAW,EAAC,YAPhB;AAQI,MAAA,SAAS,EAAC;AARd;AAAA;AAAA;AAAA;AAAA,YAFJ,eAYI;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,SAAS,EAAC,yCAFd;AAAA,6BAII;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YAZJ,EAkBKpB,MAAM,CAACM,IAAP,iBAAe;AAAG,MAAA,SAAS,EAAC,oBAAb;AAAA,gBAAmCN,MAAM,CAACM,IAAP,CAAYe;AAA/C;AAAA;AAAA;AAAA;AAAA,YAlBpB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH,CAvED;;GAAM5B,U;UAE2CH,gB,EAEgBF,O;;;KAJ3DK,U;AAwEN,eAAeA,UAAf","sourcesContent":["import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\"\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport './searchForm.scss';\n\nconst SearchForm = () => {\n\n    const {getCharacterByName, loading, error} = useMarvelService();\n\n    const {register, handleSubmit, formState: {errors}, reset} = useForm();\n\n    const [characterData, setCharacterData] = useState(null);\n\n    const onSubmit = data => {\n        getCharacterByName(data.name)\n            .then(resp => setCharacterData(resp))\n            .catch(e=>{console.log(e)})\n        reset();\n    };\n\n    const pageUrl = (data) => {\n        console.log(data)\n        return data.name;\n    }\n\n    const renderURL = (name) => {\n        return `There is! Visit ${name} page?`\n    }\n\n    console.log(characterData, Array.isArray(characterData), characterData.length);\n    // const results = !characterData ? null : characterData.length > 0 ? \n    //     <Link \n    //         className=\"char__search_found\"\n    //         to={`../${pageUrl(characterData[0].name)}`}\n    //         state={{from: characterData[0]}}\n    //     >{renderURL(characterData[0].name)}</Link> : \n    //     <p className=\"char__search_error\">\n    //         The character was not found. Check the name and try again</p>;\n\n    const StatusLoading = loading && <Spinner/>;\n    const StatusError = error && <ErrorMessage/>;\n    // const ActiveStatus = StatusError || StatusLoading || \n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className=\"char__search\">\n            <div className=\"char__search_label\">Or find a character by name:</div>\n            <input \n                {...register(\"name\", \n                    {\n                        required: 'This field is required',\n                    }\n                )} \n                type=\"text\" \n                placeholder=\"Enter name\"\n                className=\"char__search_input\"\n            />\n            <button \n                type=\"submit\" \n                className=\"char__search_button button button__main\"\n            >\n                <div className=\"inner\">find</div>\n            </button>\n            {errors.name && <p className=\"char__search_error\">{errors.name.message}</p>}\n\n            {/* {results} */}\n            {/* {characterData && typeof characterData !== 'string' && <Link \n                className=\"char__search_found\"\n                to={`../${pageUrl(characterData.name)}`}\n                state={{from: characterData}}\n            >{renderURL(characterData.name)}</Link>}\n\n            {typeof characterData === 'string' && !errors.name &&\n                <p className=\"char__search_error\">{characterData}</p>} */}\n\n        </form>\n    )\n}\nexport default SearchForm;\n\n\n"]},"metadata":{},"sourceType":"module"}