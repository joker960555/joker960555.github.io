{"ast":null,"code":"class MarvelService {\n  constructor() {\n    this._apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    this._apiKey = 'apikey=bd35b0eefb6ce288f155f735ed56a8d6';\n\n    this.getResource = async url => {\n      let res = await fetch(url);\n\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n      }\n\n      return await res.json();\n    };\n\n    this.getAllCharacters = async () => {\n      const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=333&${this._apiKey}`);\n      return res.data.results.map(this._transformCharacter);\n    };\n\n    this.getCharacterById = async id => {\n      const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\n      return this._transformCharacter(res.data.results[0]);\n    };\n\n    this._transformCharacter = ({\n      name,\n      description,\n      thumbnail,\n      urls,\n      id,\n      comics\n    }) => {\n      const onEmptyDescription = 'Sorry, description for this character was not added yet';\n      let checkDescription = !description ? onEmptyDescription : `${description.slice(0, 211)}…`;\n      const onEmptyComics = 'There are no comics about this character yet';\n      let checkComics = comics.length < 1 ? onEmptyComics : comics.items.slice(0, 10);\n      let thumbnailCoverStatus = thumbnail.path.includes('image_not_available') ? ' _not-found' : '';\n      return {\n        name: name,\n        description: checkDescription,\n        thumbnail: `${thumbnail.path}.${thumbnail.extension} `,\n        homepage: urls[0].url,\n        wiki: urls[1].url,\n        thumbnailCoverStatus: thumbnailCoverStatus,\n        id: id,\n        comics: checkComics\n      };\n    };\n  }\n\n}\n\nexport default MarvelService;","map":{"version":3,"sources":["/Users/denisskidan/Documents/work/visual_code_stuff/React-projects/marvel-app/my-app/src/services/MarvelService.js"],"names":["MarvelService","_apiBase","_apiKey","getResource","url","res","fetch","ok","Error","status","json","getAllCharacters","data","results","map","_transformCharacter","getCharacterById","id","name","description","thumbnail","urls","comics","onEmptyDescription","checkDescription","slice","onEmptyComics","checkComics","length","items","thumbnailCoverStatus","path","includes","extension","homepage","wiki"],"mappings":"AACA,MAAMA,aAAN,CAAoB;AAAA;AAAA,SAChBC,QADgB,GACL,2CADK;AAAA,SAEhBC,OAFgB,GAEN,yCAFM;;AAAA,SAIhBC,WAJgB,GAIF,MAAOC,GAAP,IAAe;AACzB,UAAIC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAArB;;AAEA,UAAI,CAACC,GAAG,CAACE,EAAT,EAAa;AACT,cAAM,IAAIC,KAAJ,CAAW,mBAAkBJ,GAAI,aAAYC,GAAG,CAACI,MAAO,EAAxD,CAAN;AACH;;AAED,aAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACH,KAZe;;AAAA,SAchBC,gBAdgB,GAcG,YAAY;AAC3B,YAAMN,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAkB,GAAE,KAAKF,QAAS,iCAAgC,KAAKC,OAAQ,EAA/E,CAAlB;AACA,aAAOG,GAAG,CAACO,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqB,KAAKC,mBAA1B,CAAP;AACH,KAjBe;;AAAA,SAmBhBC,gBAnBgB,GAmBG,MAAOC,EAAP,IAAc;AAC7B,YAAMZ,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAkB,GAAE,KAAKF,QAAS,cAAagB,EAAG,IAAG,KAAKf,OAAQ,EAAlE,CAAlB;AACA,aAAO,KAAKa,mBAAL,CAAyBV,GAAG,CAACO,IAAJ,CAASC,OAAT,CAAiB,CAAjB,CAAzB,CAAP;AACH,KAtBe;;AAAA,SAwBhBE,mBAxBgB,GAwBM,CAAC;AAACG,MAAAA,IAAD;AAAOC,MAAAA,WAAP;AAAoBC,MAAAA,SAApB;AAA+BC,MAAAA,IAA/B;AAAqCJ,MAAAA,EAArC;AAAyCK,MAAAA;AAAzC,KAAD,KAAsD;AACxE,YAAMC,kBAAkB,GAAG,yDAA3B;AACA,UAAIC,gBAAgB,GAAG,CAACL,WAAD,GAAeI,kBAAf,GAAqC,GAAEJ,WAAW,CAACM,KAAZ,CAAkB,CAAlB,EAAqB,GAArB,CAA0B,GAAxF;AACA,YAAMC,aAAa,GAAG,8CAAtB;AACA,UAAIC,WAAW,GAAGL,MAAM,CAACM,MAAP,GAAgB,CAAhB,GAAoBF,aAApB,GAAoCJ,MAAM,CAACO,KAAP,CAAaJ,KAAb,CAAmB,CAAnB,EAAsB,EAAtB,CAAtD;AACA,UAAIK,oBAAoB,GAAGV,SAAS,CAACW,IAAV,CAAeC,QAAf,CAAwB,qBAAxB,IACvB,aADuB,GACP,EADpB;AAGA,aAAO;AACHd,QAAAA,IAAI,EAAEA,IADH;AAEHC,QAAAA,WAAW,EAAEK,gBAFV;AAGHJ,QAAAA,SAAS,EAAG,GAAEA,SAAS,CAACW,IAAK,IAAGX,SAAS,CAACa,SAAU,GAHjD;AAIHC,QAAAA,QAAQ,EAAEb,IAAI,CAAC,CAAD,CAAJ,CAAQjB,GAJf;AAKH+B,QAAAA,IAAI,EAAEd,IAAI,CAAC,CAAD,CAAJ,CAAQjB,GALX;AAMH0B,QAAAA,oBAAoB,EAAEA,oBANnB;AAOHb,QAAAA,EAAE,EAAEA,EAPD;AAQHK,QAAAA,MAAM,EAAEK;AARL,OAAP;AAUH,KA1Ce;AAAA;;AAAA;;AA6CpB,eAAe3B,aAAf","sourcesContent":["\nclass MarvelService {\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    _apiKey = 'apikey=bd35b0eefb6ce288f155f735ed56a8d6';\n\n    getResource = async (url) => {\n        let res = await fetch(url)\n\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`)\n        }\n\n        return await res.json();\n    }\n\n    getAllCharacters = async () => {\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=333&${this._apiKey}`);\n        return res.data.results.map(this._transformCharacter);\n    }\n\n    getCharacterById = async (id) => {\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\n        return this._transformCharacter(res.data.results[0]);\n    }\n\n    _transformCharacter = ({name, description, thumbnail, urls, id, comics}) => {\n        const onEmptyDescription = 'Sorry, description for this character was not added yet';\n        let checkDescription = !description ? onEmptyDescription : `${description.slice(0, 211)}…`;\n        const onEmptyComics = 'There are no comics about this character yet';\n        let checkComics = comics.length < 1 ? onEmptyComics : comics.items.slice(0, 10);\n        let thumbnailCoverStatus = thumbnail.path.includes('image_not_available') ?\n            ' _not-found' : '';\n\n        return {\n            name: name,\n            description: checkDescription,\n            thumbnail: `${thumbnail.path}.${thumbnail.extension} `,\n            homepage: urls[0].url,\n            wiki: urls[1].url,\n            thumbnailCoverStatus: thumbnailCoverStatus, \n            id: id,\n            comics: checkComics\n        }\n    }\n}\n\nexport default MarvelService;"]},"metadata":{},"sourceType":"module"}